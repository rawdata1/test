A Comprehensive Threat Model of the Real-time Transport Protocol (RTP)
I. Executive Summary
The Real-time Transport Protocol (RTP) serves as the foundational transport mechanism for the vast majority of real-time audio and video communications over IP networks. Its application spans Voice over IP (VoIP), video conferencing, live streaming, WebRTC, and broadcast television, making it a critical component of the modern digital communication landscape. Despite its ubiquity, the protocol's original design, standardized in RFC 3550, prioritized low-latency media delivery and performance over security, creating a significant and inherent vulnerability profile.
The core problem with the RTP standard is its fundamental lack of built-in security primitives. The protocol was conceived in an era of a more trusted internet and, as such, provides no mechanisms for confidentiality, source authentication, or data integrity. This "designed-in insecurity" renders un-secured RTP sessions highly susceptible to a wide range of cyberattacks. Any adversary with access to the network path can trivially intercept, manipulate, or inject media streams.
This report presents a comprehensive threat model of the RTP protocol, systematically analyzing its vulnerabilities through the lens of the STRIDE framework. The key findings reveal critical threats across multiple categories. Information Disclosure through eavesdropping is trivial, allowing attackers to listen to private conversations or view video feeds. Spoofing enables stream hijacking, where an adversary can inject malicious audio or video into an active session. Tampering allows for the on-the-fly manipulation of media content, leading to data distortion or the injection of disinformation. Finally, various forms of Denial of Service attacks can disrupt or terminate communications entirely by flooding networks with malicious RTP traffic or crashing endpoints with malformed packets.
Given this threat landscape, the primary and unequivocal recommendation of this analysis is the mandatory implementation of the Secure Real-time Transport Protocol (SRTP) profile, as defined in RFC 3711, for any application that requires confidentiality, integrity, or authenticated communication. Native RTP is fundamentally unfit for secure communication over untrusted networks. SRTP directly mitigates the most severe network-based threats by providing payload encryption, message authentication, and replay protection. The strategic impact of these findings is clear: developers, network architects, and security professionals must adopt a "secure-by-default" posture, treating SRTP not as an optional feature but as a baseline requirement for building trustworthy real-time communication systems.
II. Analysis of the RTP Protocol and its Ecosystem
A thorough understanding of RTP's mechanics, design philosophy, and operational environment is essential to identifying its security weaknesses. The protocol's architecture, packet structure, and its relationship with the RTP Control Protocol (RTCP) collectively form a broad and vulnerable attack surface.
2.1. Core Protocol Mechanics and Design Philosophy
RTP was first standardized in RFC 1889 and later updated by RFC 3550 with the explicit purpose of providing end-to-end transport functions for real-time data, such as audio, video, or simulation data. It is an application-layer framing protocol, meaning its functions are typically implemented within the application itself rather than the operating system's core protocol stack. This design provides flexibility but also places a greater security burden on application developers.
A defining characteristic of RTP is its reliance on the User Datagram Protocol (UDP) for transport. This choice was deliberate, reflecting a fundamental trade-off between performance and reliability. Real-time applications are often more tolerant of minor packet loss than the variable delay (jitter) introduced by TCP's connection-oriented, retransmission-based reliability mechanisms. Consequently, RTP itself does not guarantee Quality of Service (QoS), resource reservation, or even packet delivery. Instead, it provides the necessary metadata—specifically timestamps and sequence numbers—to allow the receiving application to reconstruct the media stream, compensate for jitter, and detect packet loss. This design philosophy, while optimal for low-latency performance, is the foundational source of the protocol's security vulnerabilities. It operates on an implicit trust model where the receiver is expected to process packets based on their arrival at the correct port and, to a lesser extent, a consistent source identifier. There is no cryptographic mechanism within the base protocol to verify a packet's origin or integrity. This "trust by default" model is the antithesis of modern security principles and is the ultimate root cause of the spoofing and tampering threats detailed later in this report.
An RTP session is established for each multimedia stream and is defined by a pair of destination transport addresses (IP address and port number). A typical VoIP call or video conference will use multiple RTP sessions—one for audio and another for video—allowing a receiver to selectively process streams. By convention, RTP traffic is sent on an even-numbered port, and the associated RTCP traffic is sent on the next higher, odd-numbered port. This predictable porting scheme, while convenient, simplifies the task for an attacker attempting to locate and target active media streams.
2.2. Detailed RTP Header Analysis and Threat Surface
The structure of the RTP header itself exposes a significant attack surface. Every field, while serving a functional purpose, can be manipulated by an adversary to disrupt or compromise a communication session. The fixed RTP header is a minimum of 12 bytes, with a structure designed for efficiency.
 * Version (V): A 2-bit field indicating the protocol version, which is currently 2.
 * Padding (P): A 1-bit flag that, when set, indicates the packet contains extra padding bytes at the end of the payload. The final padding byte specifies the total number of padding bytes.
 * Extension (X): A 1-bit flag that, when set, indicates the presence of a single header extension between the fixed header and the payload.
 * CSRC Count (CC): A 4-bit field containing the number of Contributing Source (CSRC) identifiers that follow the fixed header.
   * Threat: While these first four fields are generally static, a malicious actor can craft packets with invalid values (e.g., a version other than 2, or a CSRC count inconsistent with the packet length) to test or exploit weaknesses in a receiver's parser, potentially leading to a denial of service.
 * Marker (M): A 1-bit field whose interpretation is defined by the application's profile. For video, it often marks the last packet of a frame; for audio, it might indicate the start of speech after a period of silence.
   * Threat: An attacker can tamper with this bit to cause logical errors in the receiving application. For example, flipping the marker bit on video packets could cause the decoder to misinterpret frame boundaries, leading to visual artifacts or a decoder crash.
 * Payload Type (PT): A 7-bit field that identifies the format of the RTP payload, such as the specific audio or video codec being used (e.g., PCMU, H.264). The mapping of PT values to codecs is defined in an RTP profile, such as RFC 3551, and can be negotiated dynamically for a session, often using the Session Description Protocol (SDP).
   * Threat: Tampering with the PT value can cause the receiver to attempt to decode the payload with the wrong codec, resulting in garbled output or, more severely, a crash if the codec library has vulnerabilities that can be triggered by malformed input.
 * Sequence Number: A 16-bit field that increments by one for each RTP packet sent. It is used by the receiver to detect packet loss and to reorder packets that arrive out of sequence. The initial value is supposed to be random.
   * Threat: The sequence number is a primary target for attackers. Its predictability allows an adversary who has captured a single packet to guess the sequence numbers of subsequent packets, which is essential for injecting forged packets into the stream. Manipulating the sequence numbers of in-flight packets can also wreak havoc on the receiver's reordering and playback logic.
 * Timestamp: A 32-bit field that reflects the sampling instant of the first octet in the RTP data packet. This allows the receiver to buffer packets and play them back at the correct time, compensating for network jitter. It is crucial to note that this is not a wall-clock time but a media-clock-based value (e.g., for 8000 Hz audio, it might increment by 160 for each 20ms packet).
   * Threat: Like the sequence number, the timestamp is predictable and can be manipulated. An attacker can inject packets with incorrect timestamps to disrupt synchronization or modify the timestamps of legitimate packets to cause jitter buffer overruns or underruns, severely degrading media quality.
 * Synchronization Source (SSRC): A 32-bit field that uniquely identifies the source of a stream within an RTP session. This value is chosen randomly by the source at the start of the session and is expected to be globally unique within that session. The SSRC is the primary means by which a receiver demultiplexes streams from different sources.
   * Threat: The SSRC is the cornerstone of RTP's weak identity model. The protocol provides no way to cryptographically authenticate that a packet with a given SSRC truly originated from the legitimate source. An attacker can sniff the SSRC of an active stream and then forge packets using that same SSRC, effectively impersonating the legitimate sender.
 * Contributing Source (CSRC) List: A list of 0 to 15 32-bit identifiers for contributing sources. This field is only present when a stream is generated by an RTP mixer, which combines media from multiple sources into a single stream. The CSRC list identifies the original SSRCs that contributed to the mixed payload.
   * Threat: An attacker can forge packets with a fabricated CSRC list. This could be used to exploit vulnerabilities in the logic of an endpoint that processes participant lists, or to create confusion in a multi-party conference.
2.3. The Control Plane: RTCP's Role and Inherent Risks
RTP does not operate in isolation. It is augmented by the RTP Control Protocol (RTCP), a "sister protocol" defined in the same RFC 3550 specification. RTCP's primary functions are to provide out-of-band feedback on the quality of the media distribution and to carry information about the session participants. While its use is strongly encouraged, RTCP itself is unauthenticated and unencrypted in its base form, creating a powerful side-channel for reconnaissance and session manipulation.
The different RTCP packet types each present unique risks:
 * Sender Reports (SR) and Receiver Reports (RR): These packets are periodically sent by active senders and all receivers. They contain critical QoS statistics, such as the total number of packets and bytes sent/received, the highest sequence number received, interarrival jitter, and cumulative packet loss.
   * Threat: For an attacker, these reports are a treasure trove of intelligence. By passively sniffing RTCP traffic, an adversary can learn the identity (SSRC) of all participants, assess the network conditions of each participant, and determine who is actively speaking, all without sending a single probe packet. An attacker can also forge these reports; for example, sending a fake RR with high packet loss statistics might trick an adaptive sender into lowering its bitrate, thus degrading service quality.
 * Source Description (SDES) Items: These packets convey metadata about participants. The most common item is the CNAME (Canonical End-Point Identifier), a globally unique and persistent identifier for a session participant. Other items can include NAME (the user's real name), EMAIL, PHONE, and TOOL (the software being used).
   * Threat: This is a direct vector for information disclosure. In an unencrypted session, an attacker can capture SDES packets and harvest personally identifiable information (PII) about the participants. Furthermore, an attacker can forge SDES packets to impersonate a user, change a participant's displayed name in a conference, or provide misleading information.
 * BYE: This packet is sent by a participant to signal that they are leaving the session.
   * Threat: An attacker can forge a BYE packet with a legitimate participant's SSRC. The receiver, having no way to authenticate the packet, will accept it as valid and prematurely terminate the stream from that participant, resulting in a targeted denial of service.
 * Application-Defined (APP): This packet type allows for experimental or application-specific extensions to RTCP.
   * Threat: While providing flexibility, this also creates a potential vector for proprietary vulnerabilities. If an application's custom RTCP handling logic is not securely implemented, an attacker could craft malicious APP packets to exploit bugs and compromise the endpoint.
RTCP is not merely a passive feedback mechanism; it is an active, unauthenticated control plane. Its dual role as both a source of intelligence and a tool for session manipulation makes it a high-value target for any adversary analyzing an RTP-based system.
The following table provides a summary of the threat landscape at the protocol header level, linking specific fields to the types of attacks they enable.
Table 2.1: RTP/RTCP Header Field Threat Matrix
| Field Name | Function | Potential STRIDE Threats | Example Attack Vector |
|---|---|---|---|
| RTP SSRC | Identifies the synchronization source of a stream. | Spoofing, Tampering | Attacker sniffs the SSRC of a legitimate stream and injects forged packets with the same SSRC to hijack the media session. |
| RTP Seq. Num. | Orders packets and detects loss. | Tampering, Denial of Service | Attacker modifies sequence numbers of in-flight packets to disrupt receiver's reordering logic, causing severe playback degradation. |
| RTP Timestamp | Provides timing for media playback and jitter calculation. | Tampering, Denial of Service | Attacker injects packets with wildly incorrect timestamps to cause jitter buffer over/underruns, corrupting audio/video synchronization. |
| RTP Payload Type | Identifies the media codec. | Tampering, Denial of Service, Elevation of Privilege | Attacker changes the PT to a different codec, causing a parser crash (DoS) or potentially triggering a vulnerability in the new codec's library (EoP). |
| RTCP SDES CNAME/NAME | Provides participant identification. | Information Disclosure, Spoofing | Attacker sniffs RTCP traffic to harvest user names and emails. Attacker forges an SDES packet to change a participant's displayed name. |
| RTCP BYE | Signals the end of a stream. | Denial of Service | Attacker forges a BYE packet from a legitimate SSRC to prematurely terminate their stream for all other participants. |
| RTCP SR/RR | Reports on QoS metrics (loss, jitter). | Information Disclosure, Tampering | Attacker passively collects QoS data for reconnaissance. Attacker forges an RR with false high-loss stats to trick a sender into degrading quality. |
III. Threat Analysis of RTP using the STRIDE Framework
Applying the STRIDE methodology—Spoofing, Tampering, Repudiation, Information Disclosure, Denial of Service, and Elevation of Privilege—provides a structured framework for categorizing the security threats inherent in the RTP protocol. This analysis aligns each threat with corresponding tactics and techniques from the MITRE ATT&CK framework to contextualize them within real-world adversary behaviors.
3.1. Spoofing (Impersonation)
Threat Description: Spoofing in the context of RTP involves an adversary illicitly assuming the identity of a legitimate participant in a communication session. This is fundamentally possible because the base RTP protocol lacks any form of strong source authentication; identity is inferred from the source IP address, port, and the SSRC value, all of which can be forged. An attacker who can predict or discover these parameters can inject packets that the receiver will accept as authentic.
Attack Scenarios:
 * RTP Stream Injection and Hijacking: This is the most direct spoofing attack. An adversary first identifies the parameters of an active RTP stream, including the source and destination IP/ports, the SSRC, and a recent sequence number and timestamp. This information is typically gathered by passively sniffing the network. The attacker then crafts their own RTP packets using these same parameters and injects them into the network, directed at the receiver. If the attacker has a superior network position or can flood the receiver, their packets may be processed instead of, or interleaved with, the legitimate ones. This allows the attacker to inject arbitrary audio or video content into an ongoing call or conference, effectively hijacking the media stream. Tools such as SIPVicious PRO and VideoJak are specifically designed to automate this process of reconnaissance and injection, demonstrating its practical feasibility.
 * RTCP Report Forgery: An adversary can spoof RTCP packets to manipulate the session's control plane. For example, by sending a forged Receiver Report (RR) from a legitimate participant's SSRC that indicates severe packet loss or high jitter, the attacker can deceive an adaptive sender. The sender's application logic may interpret this false feedback as genuine network congestion and respond by reducing the bitrate or changing to a lower-quality codec, thereby degrading the service for the victim without having to flood the network.
MITRE ATT&CK Alignment:
 * Tactic: Credential Access, Discovery
 * Technique T1557: Adversary-in-the-Middle (AiTM): Stream hijacking is a classic outcome of a successful AiTM attack. By positioning themselves between the communicating parties (e.g., via ARP poisoning on a LAN or by compromising a network router), an adversary can intercept the signaling and media traffic to learn the session parameters required for spoofing. They can then inject their own packets into the established communication channel.
 * Technique T1040: Network Sniffing: This technique is an essential prerequisite for most RTP spoofing attacks. The adversary must first capture unencrypted RTP and RTCP traffic to extract the SSRC, sequence numbers, timestamps, and payload types needed to craft convincing forged packets.
3.2. Tampering (Violation of Integrity)
Threat Description: Tampering involves the unauthorized modification of data in transit. Because standard RTP and RTCP packets lack any cryptographic integrity protection, such as a Message Authentication Code (MAC), an adversary positioned on the network path can alter any part of a packet without being detected. The receiver has no mechanism to verify that the packet it received is identical to the one the sender transmitted.
Attack Scenarios:
 * Media Payload Manipulation: An attacker can intercept RTP packets and strategically flip bits within the media payload. This can have various effects, from introducing audible clicks and pops in an audio stream to creating significant visual distortion in a video feed. A more sophisticated attacker could attempt to subtly alter the content, for example, by changing a single word in a sensitive conversation or manipulating visual data presented in a video conference.
 * RTP Header Tampering: Modifying the RTP header can be just as disruptive as altering the payload. By changing sequence numbers, an attacker can trick the receiver into perceiving massive packet loss, even if none occurred. By altering timestamps, they can disrupt the receiver's jitter buffer calculations, leading to choppy, unsynchronized playback. Changing the Payload Type (PT) field could cause the receiver to use the wrong decoder, resulting in garbled output or a crash.
 * RTCP SDES Tampering: An adversary can intercept an RTCP Source Description packet and modify its contents. For instance, they could change the NAME field to display a fraudulent name for a participant in a conference roster or alter the EMAIL field to phish other participants.
MITRE ATT&CK Alignment:
 * Tactic: Impact
 * Technique T1557: Adversary-in-the-Middle (AiTM): Tampering is intrinsically an AiTM activity. The adversary must be able to intercept the packet stream, modify the desired fields, and then forward the altered packet to its original destination. Techniques to achieve this position, such as DNS spoofing or ARP cache poisoning, are critical enablers.
 * Sub-technique T1557.002: ARP Cache Poisoning: On a local area network (LAN), this is a common and effective method for an attacker to redirect traffic through their own machine, allowing them to inspect and tamper with every RTP packet exchanged between two endpoints on that network.
3.3. Repudiation (Denial of Action)
Threat Description: Repudiation threats relate to the inability to prove that a specific action was taken by a particular party. In the context of RTP, the lack of cryptographic origin authentication and integrity means that a participant can plausibly deny having sent a particular piece of media, and a receiver cannot definitively prove the origin of a received packet.
Attack Scenarios:
 * Lack of Verifiable Audit Trails: Consider a business negotiation conducted over an un-secured VoIP call where a verbal agreement is made. If a dispute arises later, there is no non-repudiable evidence. The audio stream (a series of RTP packets) cannot be cryptographically tied to the speaker. One party could claim the crucial audio was injected by a third-party attacker (a plausible scenario, as shown under Spoofing), while the other has no way to prove otherwise.
 * Plausible Deniability of Session Actions: A user could maliciously terminate another participant's stream by sending a forged RTCP BYE packet. When confronted, the malicious user could claim their own system was compromised and that an attacker sent the BYE packet. Without strong authentication on RTCP packets, it is impossible to distinguish between these two scenarios, undermining accountability.
MITRE ATT&CK Alignment:
Repudiation is not a direct adversary tactic within the ATT&CK framework but rather a property of an insecure system that complicates forensic analysis and incident response. It weakens the evidentiary value of logs and network captures collected in the aftermath of attacks that leverage techniques like T1557 (Adversary-in-the-Middle). The inability to prove the origin and integrity of packets makes attribution and legal action exceptionally difficult.
3.4. Information Disclosure (Breach of Confidentiality)
Threat Description: This threat involves the unauthorized exposure of sensitive information. Since standard RTP provides no encryption, both the media payload and the control metadata are transmitted in cleartext. Any adversary with access to the network path can capture and analyze this traffic.
Attack Scenarios:
 * Eavesdropping on Communications: This is the most obvious and critical information disclosure threat. An attacker can use standard network sniffing tools like Wireshark to capture RTP packets and reconstruct the full audio and video streams. This allows them to listen in on confidential phone calls, watch private video conferences, or monitor feeds from security cameras.
 * RTCP Metadata Harvesting: Passively capturing RTCP traffic provides a wealth of intelligence for an adversary. SDES packets can reveal participants' names, email addresses, and the software they are using. SR and RR packets expose detailed network performance characteristics for each participant. This information can be used to build a profile of the targets, identify high-value individuals, or select victims with poor network connections for further attacks.
 * Information Leakage from Malformed Packets: A more subtle vector can occur in poorly implemented RTP stacks. If an attacker sends a deliberately malformed packet that causes the receiver's parser to fail, the resulting error message or response packet could inadvertently contain uninitialized memory from the host system, potentially leaking sensitive data.
MITRE ATT&CK Alignment:
 * Tactic: Collection
 * Technique T1040: Network Sniffing: This is the fundamental technique used to execute information disclosure attacks against RTP. The adversary captures the unencrypted RTP and RTCP packets as they traverse the network.
 * Technique T1429: Audio Capture (Mobile): This technique is relevant for endpoint compromise scenarios. Even if SRTP is used to protect the network path, an adversary who has compromised a mobile device can use operating system APIs to capture the audio from VoIP application calls before it is encrypted and sent to the network, or after it has been received and decrypted.
3.5. Denial of Service (Disruption of Availability)
Threat Description: A Denial of Service (DoS) attack aims to make a service or resource unavailable to its legitimate users. RTP-based services are vulnerable to DoS attacks that target either network bandwidth or endpoint processing resources.
Attack Scenarios:
 * RTP Flooding: An attacker sends a high volume of RTP packets to a victim's IP address and port. This can be done with spoofed source IPs to obscure the origin. The flood of traffic consumes the victim's network bandwidth, preventing legitimate RTP packets from reaching their destination. It also forces the endpoint's CPU to spend cycles processing the bogus packets, potentially starving the application of resources needed to handle the real media stream. Such attacks are often distributed (DDoS), using a botnet to generate overwhelming traffic volumes.
 * Malformed Packet Attacks: Instead of relying on volume, this attack uses precision. An adversary sends a small number of specially crafted, non-standard RTP or RTCP packets designed to exploit a bug in the endpoint's parsing logic. A successful malformed packet attack can cause the receiving application to crash, enter an infinite loop, or exhaust its memory, rendering it unavailable. This is an attack on a specific software implementation rather than the protocol itself.
 * Logical DoS via RTCP: An attacker can use forged RTCP packets to disrupt service. As previously mentioned, a forged BYE packet can terminate a stream. An attacker could also flood an RTP mixer with streams from many forged CSRCs, potentially exhausting its processing capacity and causing a service degradation for all participants in a conference.
MITRE ATT&CK Alignment:
 * Tactic: Impact
 * Technique T1498: Network Denial of Service: This tactic directly corresponds to attacks that aim to exhaust network bandwidth, such as RTP flooding. The goal is to saturate the network links that the target service relies on.
 * Technique T1499: Endpoint Denial of Service: This tactic covers attacks that target the availability of a service on a specific host. Malformed packet attacks that cause an application to crash or become unresponsive fall squarely into this category.
3.6. Elevation of Privilege (Unauthorized Access)
Threat Description: This is the most severe category of threat, where an adversary exploits a vulnerability in the software implementation of the RTP/RTCP protocol stack to execute arbitrary code. A successful exploit allows the attacker to gain control over the application processing the media stream, potentially with the privileges of that application's user account. This threat is not a flaw in the RTP protocol design itself but in the code that implements it. The protocol merely serves as the delivery vector for the exploit payload.
Attack Scenarios:
 * Buffer Overflow in Packet Parser: Many RTP stacks are written in memory-unsafe languages like C or C++. An attacker could craft an RTP packet with an invalid field that leads to a buffer overflow. For example, a packet with a CSRC Count (CC) field of 15 but which actually contains data for 20 CSRCs could overflow a fixed-size buffer in the parser. If the attacker can control the overflowed data, they can overwrite the program's execution stack and achieve arbitrary code execution.
 * Vulnerability in Media Codec: After an RTP packet is received and parsed, its payload is passed to a media codec (e.g., H.264, Opus) for decompression. These codecs are highly complex pieces of software and are a frequent source of security vulnerabilities. An attacker can embed an exploit within the compressed media data of an RTP payload. When the victim's application passes this malicious payload to the vulnerable codec, the exploit is triggered, compromising the endpoint.
MITRE ATT&CK Alignment:
 * Tactic: Initial Access, Execution, Privilege Escalation
 * Technique T1190: Exploit Public-Facing Application: VoIP clients, WebRTC gateways, and media servers are often internet-facing applications. A vulnerability in their RTP/RTCP handling logic that allows for remote code execution is a prime example of this technique, providing an adversary with their initial foothold on the system.
 * Technique T1068: Exploitation for Privilege Escalation: If the compromised VoIP application is running with administrative or system-level privileges (a common but dangerous misconfiguration), a successful exploit of its RTP stack can directly lead to full control over the host operating system. The attacker "escalates" their privilege from none to administrator in a single step.
The threats identified are not isolated; they often form a logical attack chain. An adversary might begin with Information Disclosure (sniffing network traffic) to gather session parameters. This enables Spoofing (injecting malicious packets), which can be used to achieve Tampering (manipulating media) or Denial of Service (disrupting the stream). The most sophisticated attacks leverage the RTP stream as a transport for an exploit targeting an implementation flaw, leading to Elevation of Privilege. This interconnectedness means that mitigating the initial information disclosure threat can often break the entire attack chain for more advanced exploits.
Table 3.1: Comprehensive STRIDE Threat Model for RTP
| STRIDE Category | Threat Scenario | Description of Attack | Potential Impact | MITRE ATT&CK Tactic(s) | MITRE ATT&CK Technique ID(s) |
|---|---|---|---|---|---|
| Spoofing | RTP Stream Hijacking | Attacker forges RTP packets with a legitimate SSRC to inject malicious audio/video. | Loss of integrity, injection of disinformation, session takeover. | Credential Access, Discovery | T1557 (Adversary-in-the-Middle), T1040 (Network Sniffing) |
| Tampering | In-Transit Media Manipulation | Attacker modifies RTP packet payloads or headers to distort media or disrupt playback. | Degraded quality, corrupted information, service disruption. | Impact | T1557 (Adversary-in-the-Middle) |
| Repudiation | Lack of Origin Proof | A participant can deny sending specific media, as there is no cryptographic signature. | Invalidated audit trails, inability to resolve disputes, complicates forensics. | (System Property) | N/A (Affects response to T1557, etc.) |
| Information Disclosure | Eavesdropping on Media | Attacker captures unencrypted RTP packets and reconstructs the audio/video conversation. | Loss of confidentiality, exposure of sensitive business or personal data. | Collection | T1040 (Network Sniffing), T1429 (Audio Capture) |
| Denial of Service | RTP Network Flood | Attacker overwhelms a victim's network with a high volume of RTP packets. | Service unavailability, complete disruption of communications. | Impact | T1498 (Network Denial of Service) |
| Denial of Service | Malformed Packet Crash | Attacker sends a crafted packet that exploits a bug in the endpoint's parser, causing a crash. | Endpoint unavailability, session termination. | Impact | T1499 (Endpoint Denial of Service) |
| Elevation of Privilege | Codec Vulnerability Exploit | Attacker sends an RTP packet with a malicious payload that triggers a vulnerability in the media codec. | Full compromise of the endpoint system, data exfiltration, lateral movement. | Initial Access, Execution, Privilege Escalation | T1190 (Exploit Public-Facing Application), T1068 (Exploitation for Privilege Escalation) |
IV. Mitigation Strategies and the Role of SRTP
While the threat landscape for standard RTP is severe, effective mitigations exist. These range from network-level controls, which offer limited protection, to the implementation of the Secure RTP (SRTP) profile, which provides a definitive cryptographic solution to the most critical threats.
4.1. Architectural and Operational Mitigations (Limited Effectiveness)
Before the widespread adoption of SRTP, system administrators relied on defense-in-depth strategies to protect RTP-based services. These measures can add layers of security but are ultimately insufficient on their own as they do not address the protocol's fundamental lack of cryptographic protections.
 * Network-Level Controls: The first line of defense often involves network hardware. Firewalls and Session Border Controllers (SBCs) can be configured to restrict RTP traffic, allowing packets only from known, trusted IP addresses associated with a signaling session. Ingress filtering can help mitigate DoS attacks that use spoofed IP addresses. Network devices can also be configured with rate-limiting policies to throttle abnormally high volumes of RTP traffic from a single source, providing some protection against flooding attacks. However, these controls are brittle; they are ineffective against an adversary who has compromised a legitimate endpoint or is positioned within the trusted network perimeter (an insider threat). They also cannot prevent eavesdropping or tampering by an attacker who controls an intermediate network router.
 * Application-Level Heuristics: Some RTP applications implement heuristics to detect anomalous behavior. For example, the open-source PBX software Asterisk introduced features like strictrtp and probation. The strictrtp option causes Asterisk to lock onto the source IP address and port of the first valid RTP packet it receives and to drop all subsequent packets from any other source. The probation feature requires a new source to send a certain number of packets before it is considered valid. While these mechanisms can thwart simple stream injection attempts, they are workarounds that can fail in complex network scenarios (e.g., behind certain types of NAT) and provide no protection against an attacker who can spoof the original source IP address or perform an AiTM attack.
4.2. The SRTP Security Profile (RFC 3711): The Definitive Solution
The definitive mitigation for the core security flaws in RTP is the Secure Real-time Transport Protocol (SRTP). It is important to understand that SRTP is not a new protocol but a security profile of RTP. It adds a layer of cryptographic protection directly to RTP and RTCP packets, preserving the efficiency and structure of the original protocol while addressing its security shortcomings. The implementation of SRTP fundamentally transforms the threat model for real-time communications. It effectively nullifies the most common and easily executed network-based attacks—eavesdropping, spoofing, tampering, and replay—by introducing strong cryptographic guarantees. With SRTP, the primary focus of the threat model shifts from the untrusted network path to the security of the endpoints themselves, specifically the key management process and the robustness of the software implementation.
SRTP provides three core security services that directly counter the STRIDE threats identified in the previous section:
 * Confidentiality (Countering Information Disclosure): SRTP encrypts the payload of each RTP packet. This prevents an eavesdropper on the network from being able to understand the content of the audio or video stream. The default and most common encryption cipher is the Advanced Encryption Standard (AES) operating in Counter Mode (AES-CM), which is well-suited for real-time streams as it does not propagate errors and allows for parallel processing. The RTP header itself is left unencrypted to allow routers and other network devices to perform QoS functions based on header information. A separate mechanism, defined in RFC 6904, allows for the selective encryption of RTP header extensions if they contain sensitive data. This confidentiality service is the direct mitigation for eavesdropping attacks (T1040: Network Sniffing).
 * Message Authentication and Integrity (Countering Spoofing and Tampering): This is arguably SRTP's most critical feature. Each SRTP packet includes a cryptographic authentication tag, typically generated using the HMAC-SHA1 algorithm. This tag is calculated over both the (encrypted) payload and key parts of the RTP header, including the SSRC and sequence number. When an SRTP packet is received, the receiver recalculates the tag using its own secret key and compares it to the tag in the packet. If they do not match, the packet is discarded. This makes it computationally infeasible for an attacker who does not possess the shared secret key to either forge a new packet (spoofing) or modify an existing one in transit (tampering) without the change being detected. This service is the direct mitigation for stream hijacking and manipulation attacks (T1557: Adversary-in-the-Middle).
 * Replay Protection (Countering Spoofing/DoS): To prevent an attacker from capturing valid SRTP packets and re-injecting them into the stream at a later time, SRTP implements a replay protection mechanism. The receiver maintains a sliding window of the sequence numbers of all successfully authenticated packets it has received. If a new packet arrives with a sequence number that is either too old or has already been seen, it is identified as a replay and discarded. This thwarts simple replay attacks that could be used to disrupt a session or repeat a portion of a conversation.
4.3. The Criticality of Secure Key Management
The entire security model of SRTP hinges on a shared secret master key known only to the legitimate participants in the session. If an attacker can obtain this key, all of SRTP's protections are rendered useless. SRTP itself does not specify how this key should be exchanged; it relies on an external key management protocol. Therefore, a security claim of "using SRTP" is incomplete and potentially misleading without a clear statement of how the keys are managed. The security of the entire communication session is ultimately determined by the security of its key exchange mechanism.
There are several methods for SRTP key management, with varying levels of security:
 * DTLS-SRTP (Datagram Transport Layer Security - SRTP): This is the strongest and most widely adopted method, and it is mandatory for all WebRTC implementations. In this model, a DTLS handshake is performed directly between the media endpoints over the same ports that will be used for media. This handshake allows the endpoints to authenticate each other (typically using certificates) and securely negotiate a shared SRTP master key. This approach is highly secure because it binds the key exchange to the media path and provides robust, authenticated key establishment.
 * SDES (Session Description Protocol Security Descriptions for SRTP): In this method, the SRTP master key and other cryptographic parameters are exchanged within the signaling messages, such as a SIP INVITE, embedded within the SDP payload. This approach can be secure, but only if the signaling channel itself is encrypted. For example, exchanging SDES keys within SIP messages that are transported over TLS (SIPS) is a secure practice. However, if the signaling is sent over unencrypted UDP or TCP, the SRTP keys are transmitted in cleartext for any network sniffer to capture, completely undermining SRTP's security. This insecure configuration is a critical and unfortunately common vulnerability in some VoIP deployments.
 * ZRTP: This is another key agreement protocol where the key exchange happens in-band on the media path itself. It is designed for opportunistic encryption and does not require a public key infrastructure (PKI). While effective, it is less common in enterprise and web-based systems than DTLS-SRTP.
The clear industry best practice is to use DTLS-SRTP for key management, as it provides the most robust and integrated security model for establishing protected real-time media sessions.
Table 4.1: RTP vs. SRTP Security Posture Comparison
| STRIDE Threat | Vulnerability in Standard RTP | Mitigation in SRTP | Residual Risk with SRTP |
|---|---|---|---|
| Spoofing | No source authentication. SSRC and IP/Port are easily forged. | Message Authentication (HMAC): Packets without a valid tag are discarded, making forgery computationally infeasible without the key. | Vulnerabilities in the key exchange protocol (e.g., SDES over cleartext SIP) could leak the key, re-enabling spoofing. |
| Tampering | No integrity protection. Any part of the packet can be modified in transit without detection. | Message Authentication (HMAC): The tag covers the header and payload, so any modification will invalidate the tag, causing the packet to be discarded. | None at the protocol level. An attacker on a compromised endpoint can still tamper with media before encryption. |
| Repudiation | No cryptographic proof of origin or integrity. Actions can be plausibly denied. | Message Authentication (HMAC): While not a digital signature, the HMAC provides strong proof that the packet was created by a party holding the shared secret key. | Does not provide true non-repudiation in the legal sense, which requires asymmetric cryptography (digital signatures). |
| Information Disclosure | No encryption. Media payload and RTCP metadata are sent in cleartext. | Payload Encryption (AES): The media content is encrypted, rendering it unintelligible to eavesdroppers. | RTP headers remain unencrypted. RTCP metadata is also unencrypted by default. Endpoint compromise can bypass encryption. |
| Denial of Service | Vulnerable to packet floods and crashes from malformed packets. | Replay Protection: Prevents injection of previously captured packets. Authentication: Allows for quick discarding of invalid flood packets. | Still vulnerable to high-volume network floods that saturate bandwidth before packets can be authenticated. Does not protect against implementation bugs. |
| Elevation of Privilege | Can act as a delivery vector for exploits targeting vulnerabilities in parsers or codecs. | Authentication: Prevents an external attacker from injecting an exploit payload. | Does not mitigate vulnerabilities in the endpoint's parser or codecs. A compromised (but authenticated) peer could still send an exploit. |
V. Conclusion and Strategic Recommendations
This comprehensive threat model demonstrates that the Real-time Transport Protocol, in its standard form as defined by RFC 3550, is fundamentally insecure and unsuitable for modern communications over untrusted networks. Its design, which prioritizes performance and low latency at the expense of all security considerations, is a relic of a more trusted early internet. The protocol's lack of confidentiality, integrity, and authentication exposes it to a wide array of trivial and severe attacks, ranging from passive eavesdropping to active stream hijacking and endpoint compromise.
The implementation of the Secure RTP (SRTP) profile is the definitive solution to the protocol's inherent network-based vulnerabilities. SRTP is not an incremental improvement but a transformative control that fundamentally alters the protocol's security posture. By providing strong cryptographic guarantees for confidentiality, message authentication, and replay protection, SRTP effectively mitigates the threats of spoofing, tampering, and information disclosure from network-based adversaries. The focus of the threat landscape for a properly secured system thus shifts from the network path to the endpoints themselves—specifically, the security of the key management process and the robustness of the software implementation against bugs that could lead to denial of service or privilege escalation.
Based on this analysis, the following strategic recommendations are provided for key stakeholders involved in the development, deployment, and management of real-time communication systems.
Strategic Recommendations for Stakeholders
For Developers and Software Engineers:
 * Mandate SRTP by Default: SRTP should not be an optional or configurable feature in any new real-time communication application. It must be the default and, where possible, the only operational mode. The use of standard RTP should be explicitly disallowed or flagged as a high-risk configuration.
 * Prioritize Secure Key Management: Implement DTLS-SRTP as the key management mechanism. It is the industry standard for WebRTC and provides a robust, authenticated key exchange integrated with the media stream setup. Avoid insecure methods like SDES over unencrypted signaling channels.
 * Harden Protocol Implementations: The most severe remaining threat is the exploitation of implementation vulnerabilities. Invest heavily in security testing for all code that parses RTP/RTCP packets or decodes media payloads. Employ techniques such as fuzz testing (fuzzing), static and dynamic code analysis, and regular penetration testing to identify and remediate vulnerabilities like buffer overflows and integer overflows in parsers and codecs.
For Security Architects and System Designers:
 * Enforce SRTP via Policy: In enterprise environments, use Session Border Controllers (SBCs) and other media gateways to enforce a policy that all real-time media streams must be encrypted with SRTP. Configure these devices to reject any attempts to establish unencrypted RTP sessions.
 * Secure the Signaling Plane: The security of SRTP is dependent on the security of its key exchange. Ensure that the signaling protocol used to set up calls (e.g., SIP, XMPP) is itself secured with TLS to protect the integrity of the negotiation and prevent attacks on the key management process, especially if SDES is used.
 * Adopt a Zero Trust Mindset: Do not assume any network segment is "trusted." Enforce SRTP encryption for all media streams, including those that remain entirely within the internal corporate network, to protect against insider threats and adversaries who have already breached the perimeter.
For Network Administrators and Security Operations:
 * Monitor for DoS Attacks: While SRTP protects content, it cannot prevent volumetric DoS attacks that saturate network bandwidth. Implement network monitoring and traffic analysis to detect the signatures of RTP flooding attacks and have a response plan in place, potentially involving upstream ISPs or DDoS mitigation services.
 * Log and Audit Securely: Ensure that signaling servers and media gateways produce detailed, tamper-evident logs of session setups, including the cryptographic parameters negotiated. These logs are invaluable for forensic analysis in the event of a security incident.
 * Educate Users: While a technical control, user awareness is part of a defense-in-depth strategy. Educate users about the risks of using un-vetted communication software and the importance of end-to-end encryption indicators.
Future Outlook
As real-time communication continues to evolve, new protocols and technologies will present both opportunities and challenges. The emergence of QUIC (Quick UDP Internet Connections) as a potential transport for real-time media may offer inherent security benefits, as it builds on TLS 1.3 to provide an encrypted-by-default transport. However, the fundamental principles derived from this analysis of RTP will remain relevant: any protocol designed for real-time communication must integrate strong, non-optional security primitives for confidentiality, integrity, and authentication from the ground up. The lessons learned from RTP's decades of insecurity should inform the design of the next generation of real-time protocols, ensuring that security is a foundational requirement, not an afterthought.
